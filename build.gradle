plugins {
    id 'java'
    id 'groovy'
    id 'maven'
    id 'signing'
}

group 'com.github.engwen'
version '2.4.2'

sourceCompatibility = '1.8'
targetCompatibility = '1.8'
compileJava.options.encoding = 'UTF-8'
compileGroovy.options.encoding = 'UTF-8'

sourceSets {
    main {
        java { srcDirs = [] }
        groovy { srcDirs += ['src/main/java'] }
    }
}

repositories {
    mavenLocal()
    mavenCentral()
}

dependencies {
    implementation 'org.codehaus.groovy:groovy-all:2.5.7'
    testImplementation group: 'junit', name: 'junit', version: '4.12'
}

javadoc {
    // <meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
    // 防止本地打开中文乱码
    options.addStringOption("charset", "UTF-8")
}

task copyJars(type: Copy) {
    def localMavenRepo = new File(System.getProperty('user.home'), '.m2/repository').absolutePath
    from "build/libs"
    into localMavenRepo + File.separator + this.project.group.toString().replace(".", File.separator) + File.separator + this.project.name + File.separator + this.project.version
}

afterEvaluate { project ->
    uploadArchives {
        repositories {
            mavenDeployer {
                beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

                repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2") {
                    authentication(userName: MAVEN_USERNAME, password: MAVEN_PASSWORD)
                }
                snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots") {
                    authentication(userName: MAVEN_USERNAME, password: MAVEN_PASSWORD)
                }

                pom.project {
                    name "$project.name"
                    packaging 'jar'
                    description "https://github.com/engwen/owlMagicUtil/blob/master/readMe.md"
                    url "https://github.com/engwen/owlMagicUtil"
                    scm {
                        url = 'git@github.com:engwen/owlMagicUtil.git'
                        connection = 'scm:git:git@github.com:engwen/owlMagicUtil.git'
                        developerConnection = 'scm:git:git@github.com:engwen/owlMagicUtil.git'
                    }
                    licenses {
                        license {
                            name = 'The Apache License, Version 2.0'
                            url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                        }
                    }
                    // 开发者信息
                    developers {
                        developer {
                            name = 'engwen'
                            email = 'xiachanzou@outlook.com'
                        }
                    }
                }
            }
        }
    }

    task sourcesJar(type: Jar) {
        archiveClassifier = 'sources'
        from sourceSets.main.allJava
    }

    task javadocJar(type: Jar) {
        archiveClassifier = 'javadoc'
        from javadoc.destinationDir
    }

    artifacts {
        archives jar
        archives javadocJar
        archives sourcesJar
    }

    signing {
        sign configurations.archives
    }
}
//tasks.withType(GenerateMavenPom).all {
//    def matcher = name =~ /generatePomFileFor(\w+)Publication/
//    def publicationName = matcher[0][1]
//    destination = "$buildDir/poms/${publicationName}-pom.xml"
//}

//skip Test tasks
//gradle.taskGraph.whenReady() {
//    tasks.each { task ->
//        if (task.name.contains("test")) {
//            task.enabled = false
//        }
//    }
//}